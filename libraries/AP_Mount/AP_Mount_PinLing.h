/*
  SToRM32 mount using serial protocol backend class
 */
#pragma once

#include <AP_HAL/AP_HAL.h>
#include <AP_AHRS/AP_AHRS.h>

#include <AP_Math/AP_Math.h>
#include <AP_Common/AP_Common.h>
#include <AP_GPS/AP_GPS.h>
#include <GCS_MAVLink/GCS_MAVLink.h>
#include <RC_Channel/RC_Channel.h>
#include "AP_Mount_Backend.h"

#define AP_Mount_PinLing_RESEND_MS   1000    // resend angle targets to gimbal once per second

class AP_Mount_PinLing : public AP_Mount_Backend
{

public:
    // Constructor
    AP_Mount_PinLing(AP_Mount &frontend, AP_Mount::mount_state &state, uint8_t instance);

    // init - performs any required initialisation for this instance
    virtual void init(const AP_SerialManager& serial_manager);

    // update mount position - should be called periodically
    virtual void update();

    // has_pan_control - returns true if this mount can control it's pan (required for multicopters)
    virtual bool has_pan_control() const;

    // set_mode - sets mount's mode
    virtual void set_mode(enum MAV_MOUNT_MODE mode);

    // status_msg - called to allow mounts to send their status to GCS using the MOUNT_STATUS message
    virtual void status_msg(mavlink_channel_t chan);

private:

    const float SPPED_CONTROL_UNIT = 0.1220740379;  //deg/s
    const float ANGLE_CONTROL_UNIT = 0.02197265625; //deg

    const uint8_t AUTO_RESET[6] = {0x3E, 0x45, 0x01, 0x46, 0x12, 0x12};

    const uint8_t ZOOM_UP[6]   = { 0x81, 0x01, 0x04, 0x07, 0x37, 0xFF};
    const uint8_t ZOOM_DOWN[6] = { 0x81, 0x01, 0x04, 0x07, 0x27, 0xFF};
    const uint8_t ZOOM_STOP[6] = { 0x81, 0x01, 0x04, 0x07, 0x00, 0xFF}; 
    const uint8_t ZOOM_GET[5]  = { 0x81, 0x09, 0x04, 0x47, 0Xff };

    const uint8_t READ_DATA[5] = { 0x3e, 0X3D, 0x00, 0x3D, 0x00 };

    const uint8_t RECORD_START[48] = { 0x7e,0x7e,0x44,0x00,0x00,0x7c,0x01,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0xbd};
    const uint8_t RECORD_STOP[48] =  { 0x7e,0x7e,0x44,0x00,0x00,0x7c,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0xbc};
    const uint8_t TAKE_PHOTO[48] =  { 0x7e,0x7e,0x44,0x00,0x00,0x7c,0x02,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
                                       0x00,0x00,0x00,0x00,0xbe};
    const uint8_t PIC_PIC[4][48] = {
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb9},
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xba},
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbb},
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb8},   
    };
    const uint8_t COLOR_SWITCH[2][48] = {
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xba},
        
        {0x7e,0x7e,0x44,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
         0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb9},
    };

    typedef enum CONTROL_MODE{
        MODE_NONE = 0,  //none mode
        MODE_SPEED,     //speed mode
        MODE_ANGLE,     //angle mode IMU
        MODE_RC,        //pwm mode 
        MODE_REL_MOTOR_ANGLE,  //angle mode motor
        MODE_AUTO_RETURN, //AUTO return reset
    }CONTROL_MODE;

    typedef enum Flag {
        FLAG_OFF = 0,
        FLAG_OK = 1,
    }FLAG;

    typedef struct _camera_flag{
        uint8_t zoom_up_falg : 1;
        uint8_t zoom_down_flag : 1;
        uint8_t zoom_stop_flag : 1;
        uint8_t color_switch_falg : 1;  
        uint8_t take_photo_flag : 1;
        uint8_t record_flag : 1;
        uint8_t record_end_flag : 1;
        uint8_t auto_reset_flag : 1;  
        uint8_t picture_switch_flag : 1;   
    }CameraFlag;

    union PinLingLongCmd{
        uint8_t data[20];
        struct LongCmd{
            uint8_t headers[4];   /* header 4 byte */
            CONTROL_MODE roll_mode;
            CONTROL_MODE pitch_mode;
            CONTROL_MODE yaw_mode;
            int16_t roll_speed;
            int16_t rool_angle;
            int16_t pitch_speed;
            union PitchControl{
                int16_t pitch_angle;
                int8_t pitch_pwm[2];
            }pitchControl;               
            int16_t yaw_speed;
            union YawControl{
                int16_t yaw_angle;
                int8_t yaw_pwm[2];
            }yawControl;            
            uint8_t crc;
        }longCmd;
    };

    union PinLingLongCmd pin_ling_long_cmd;  
    CameraFlag camera_flag;
    int16_t old_color_rc_in;       // camera color switch
    int16_t old_take_photo_rc_in;  // camera take photo
    int16_t old_pic_rc_in;
    uint8_t current_pic_index;
    uint8_t current_color_index;
    uint32_t camera_last_send;
    uint32_t request_read_time;

    bool read_rc(void);

    void set_mount_camera(void);

    // send_target_angles
    void send_target_angles(float pitch_deg, float roll_deg, float yaw_deg);

    // send read data request
    void get_angles();

    // read_incoming
    void read_incoming();

    bool can_send(bool with_control, uint8_t len);

    // internal variables
    AP_HAL::UARTDriver *_port;

    bool _initialised;              // true once the driver has been initialised
    uint32_t _last_send;            // system time of last do_mount_control sent to gimbal

    // keep the last _current_angle values
    Vector3l _current_angle;
};
